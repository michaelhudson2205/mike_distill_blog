[
  {
    "path": "posts/2021-12-19-creating-a-leaflet-map-in-r/",
    "title": "Creating a leaflet map in R",
    "description": "Using an API to access geospatial data.",
    "author": [
      {
        "name": "Mike Hudson",
        "url": "https://mike-distill-blog.netlify.app/"
      }
    ],
    "date": "2021-12-19",
    "categories": [
      "API",
      "Google Maps",
      "Leaflet",
      "htmlwidgets"
    ],
    "contents": "\n\n\n\nRelevance to Data Analytics Skills\nUsing RMarkdown\nAccessing data from Google Maps API\nData wrangling\nUsing R code\nCreating interactive map with Leaflet\nProviding data in form that provides value to users\nAbility to find resources & help online\nTo the project…\nAt a recent interview I had several questions about APIs, so I thought I would do a few projects that involve retrieving data from online applications’ databases. API is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other.\nIn this project I set up an account with the Google Maps Platform which then allowed me to serve up a list of street addresses and receive back their latitude and longitude coordinates. I needed these in order to place the markers on the leaflet map I was using for the visualisation. I started with an Excel spreadsheet as shown below:\n\n\n\nI saved that file as a .csv and then brought it into R to perform the following:\n\n\n\nThe ggmap::geocode() returns the latitude and longitude for street addresses after accessing the Google Maps Platform API.\nI did some more wrangling of the hasi_coords.csv file to produce the following:\n\n\n\nNow, with the data ready, I proceeded to make the map.\n\n\nlibrary(tidyverse)\nlibrary(leaflet)\nlibrary(leaflet.extras)\n\nhasi_coords <- read_csv(\"hasi_coords_A.csv\")\n\nhasi_coords$file <- as.character(hasi_coords$file)\n\nAdam_data <- hasi_coords %>% \n  filter(Keyworker == \"Adam\")\n\nAllen_data <- hasi_coords %>% \n  filter(Keyworker == \"Allen\")\n\nCarrie_data <- hasi_coords %>% \n  filter(Keyworker == \"Carrie\")\n\nEbony_data <- hasi_coords %>% \n  filter(Keyworker == \"Ebony\")\n\nGordon_data <- hasi_coords %>% \n  filter(Keyworker == \"Gordon\")\n\nJen_data <- hasi_coords %>% \n  filter(Keyworker == \"Jen\")\n\nKalindi_data <- hasi_coords %>% \n  filter(Keyworker == \"Kalindi\")\n\nKerryM_data <- hasi_coords %>% \n  filter(Keyworker == \"KerryM\")\n\nMike_data <- hasi_coords %>% \n  filter(Keyworker == \"Mike\")\n\npal <- colorFactor(palette = c(\"olivedrab\", \"goldenrod\"),\n                   levels = c(\"Nowra\", \"Ulladulla\"))\n\nAdam_icons <- awesomeIcons(\n  icon = \"ios-close\",\n  iconColor = \"black\",\n  library = \"ion\",\n  markerColor = Adam_data$site_colour\n)\n\nAllen_icons <- awesomeIcons(\n  icon = \"ios-close\",\n  iconColor = \"black\",\n  library = \"ion\",\n  markerColor = Allen_data$site_colour\n)\n\nCarrie_icons <- awesomeIcons(\n  icon = \"ios-close\",\n  iconColor = \"black\",\n  library = \"ion\",\n  markerColor = Carrie_data$site_colour\n)\n\nEbony_icons <- awesomeIcons(\n  icon = \"ios-close\",\n  iconColor = \"black\",\n  library = \"ion\",\n  markerColor = Ebony_data$site_colour\n)\n\nGordon_icons <- awesomeIcons(\n  icon = \"ios-close\",\n  iconColor = \"black\",\n  library = \"ion\",\n  markerColor = Gordon_data$site_colour\n)\n\nJen_icons <- awesomeIcons(\n  icon = \"ios-close\",\n  iconColor = \"black\",\n  library = \"ion\",\n  markerColor = Jen_data$site_colour\n)\n\nKalindi_icons <- awesomeIcons(\n  icon = \"ios-close\",\n  iconColor = \"black\",\n  library = \"ion\",\n  markerColor = Kalindi_data$site_colour\n)\n\nKerryM_icons <- awesomeIcons(\n  icon = \"ios-close\",\n  iconColor = \"black\",\n  library = \"ion\",\n  markerColor = KerryM_data$site_colour\n)\n\nMike_icons <- awesomeIcons(\n  icon = \"ios-close\",\n  iconColor = \"black\",\n  library = \"ion\",\n  markerColor = Mike_data$site_colour\n)\n\nm1 <- leaflet(width = \"100%\") %>% \n  addTiles(group = \"OSM\") %>% \n  addProviderTiles(\"CartoDB\", group = \"Carto\") %>% \n  addProviderTiles(\"Esri\", group = \"Esri\") %>% \n  addAwesomeMarkers(data = Adam_data, icon = Adam_icons, label = ~paste0(Keyworker,\" \",file,\" \",name), group = \"Adam\") %>%\n  addAwesomeMarkers(data = Allen_data, icon = Allen_icons, label = ~paste0(Keyworker,\" \",file,\" \",name), group = \"Allen\") %>%\n  addAwesomeMarkers(data = Carrie_data, icon = Carrie_icons, label = ~paste0(Keyworker,\" \",file,\" \",name), group = \"Carrie\") %>%\n  addAwesomeMarkers(data = Ebony_data, icon = Ebony_icons, label = ~paste0(Keyworker,\" \",file,\" \",name), group = \"Ebony\") %>%\n  addAwesomeMarkers(data = Gordon_data, icon = Gordon_icons, label = ~paste0(Keyworker,\" \",file,\" \",name), group = \"Gordon\") %>%\n  addAwesomeMarkers(data = Jen_data, icon = Jen_icons, label = ~paste0(Keyworker,\" \",file,\" \",name), group = \"Jen\") %>%\n  addAwesomeMarkers(data = Kalindi_data, icon = Kalindi_icons, label = ~paste0(Keyworker,\" \",file,\" \",name), group = \"Kalindi\") %>%\n  addAwesomeMarkers(data = KerryM_data, icon = KerryM_icons, label = ~paste0(Keyworker,\" \",file,\" \",name), group = \"KerryM\") %>%\n  addAwesomeMarkers(data = Mike_data, icon = Mike_icons, label = ~paste0(Keyworker,\" \",file,\" \",name), group = \"Mike\") %>%\n  \n  addLayersControl(baseGroups = c(\"OSM\", \"Carto\", \"Esri\"),\n                   overlayGroups = c(\"Adam\",\"Allen\",\"Carrie\",\"Ebony\",\"Gordon\",\"Jen\",\"Kalindi\",\"KerryM\",\"Mike\")) %>% \n  addSearchFeatures(\n    targetGroups = c(\"Adam\",\"Allen\",\"Carrie\",\"Ebony\",\"Gordon\",\"Jen\",\"Kalindi\",\"KerryM\",\"Mike\"),\n    options = searchFeaturesOptions(zoom = 20)\n  ) %>%\n  addResetMapButton() %>% \n  addLegend(position = \"bottomright\",\n            pal = pal,\n            values = c(\"Nowra\",\"Ulladulla\"))\n\nm1\n\n\n\n{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,\"OSM\",{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"http://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"http://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB\",null,\"Carto\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addProviderTiles\",\"args\":[\"Esri\",null,\"Esri\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addAwesomeMarkers\",\"args\":[[-35.43856,-35.34455,-35.36085,-35.36115,-35.36135],[150.3298,150.4715,150.4721,150.4724,150.4726],{\"icon\":\"ios-close\",\"markerColor\":[\"orange\",\"orange\",\"orange\",\"orange\",\"orange\"],\"iconColor\":\"black\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"ion\"},null,\"Adam\",{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,[\"Adam 18789 MaCh\",\"Adam 38786 JoFe\",\"Adam 36163 MiCo\",\"Adam 21998 RoTa\",\"Adam 33862 JaWo\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addAwesomeMarkers\",\"args\":[[-35.2319,-35.35571,-35.36105,-35.36125,-34.87784,-34.88776,-34.89167],[150.4446,150.4623,150.4723,150.4725,150.6008,150.6081,150.6105],{\"icon\":\"ios-close\",\"markerColor\":[\"orange\",\"orange\",\"orange\",\"orange\",\"green\",\"green\",\"green\"],\"iconColor\":\"black\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"ion\"},null,\"Allen\",{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,[\"Allen 35202 HeCr\",\"Allen 30333 CoSe\",\"Allen 31811 JoSz\",\"Allen 28890 MaWh\",\"Allen 35986 JaMo\",\"Allen 34593 ElWa\",\"Allen 19879 ElFo\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addAwesomeMarkers\",\"args\":[[-34.87648,-34.85467,-34.88907,-34.89571,-34.90811],[150.5923,150.5974,150.6073,150.617,150.7517],{\"icon\":\"ios-close\",\"markerColor\":[\"green\",\"green\",\"green\",\"green\",\"green\"],\"iconColor\":\"black\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"ion\"},null,\"Carrie\",{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,[\"Carrie 16536 MiAn\",\"Carrie 29890 ReMu\",\"Carrie 38842 CoAd\",\"Carrie 34159 TaJo\",\"Carrie 15507 ReWi\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addAwesomeMarkers\",\"args\":[[-35.50702,-35.15134,-35.16447],[150.3897,150.5903,150.5963],{\"icon\":\"ios-close\",\"markerColor\":[\"orange\",\"orange\",\"orange\"],\"iconColor\":\"black\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"ion\"},null,\"Ebony\",{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,[\"Ebony 31809 ShSu\",\"Ebony 20786 TrMc\",\"Ebony 7542 ShWi\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addAwesomeMarkers\",\"args\":[[-34.88118,-34.87905,-35.08682,-34.89047,-34.88925,-35.11136,-34.93151],[150.5936,150.5965,150.5968,150.6001,150.6123,150.6226,150.7615],{\"icon\":\"ios-close\",\"markerColor\":[\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\"],\"iconColor\":\"black\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"ion\"},null,\"Gordon\",{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,[\"Gordon 32592 ToWi\",\"Gordon 17555 GaMc\",\"Gordon 22228 GrCl\",\"Gordon 21205 ChBy\",\"Gordon 39725 BrMa\",\"Gordon 40209 JoMc\",\"Gordon 39685 PaHi\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addAwesomeMarkers\",\"args\":[[-34.87402,-34.8911,-34.84481,-34.83963],[150.5966,150.6005,150.6109,150.6141],{\"icon\":\"ios-close\",\"markerColor\":[\"green\",\"green\",\"green\",\"green\"],\"iconColor\":\"black\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"ion\"},null,\"Jen\",{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,[\"Jen 38362 TeGr\",\"Jen 15785 JoKu\",\"Jen 15094 DeCo\",\"Jen 32754 LiAr\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addAwesomeMarkers\",\"args\":[[-35.36095,-35.33056,-35.36679,-35.15725],[150.4722,150.4732,150.4747,150.5985],{\"icon\":\"ios-close\",\"markerColor\":[\"orange\",\"orange\",\"orange\",\"orange\"],\"iconColor\":\"black\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"ion\"},null,\"Kalindi\",{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,[\"Kalindi 39729 JuSw\",\"Kalindi 38580 ReTh\",\"Kalindi 38583 KeWi\",\"Kalindi 35649 ChHa\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addAwesomeMarkers\",\"args\":[[-34.97654,-34.8911,-34.88502,-34.88522,-34.88982],[150.5293,150.6005,150.6021,150.6042,150.616],{\"icon\":\"ios-close\",\"markerColor\":[\"green\",\"green\",\"green\",\"green\",\"green\"],\"iconColor\":\"black\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"ion\"},null,\"KerryM\",{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,[\"KerryM 10645 ShCo\",\"KerryM 39315 TaHi\",\"KerryM 18491 AlJo\",\"KerryM 31142 WeJa\",\"KerryM 33331 GaAr\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addAwesomeMarkers\",\"args\":[[-34.89149,-34.87842,-35.10389,-35.09871,-34.91078],[150.5467,150.6051,150.6321,150.6521,150.7451],{\"icon\":\"ios-close\",\"markerColor\":[\"green\",\"green\",\"green\",\"green\",\"green\"],\"iconColor\":\"black\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"ion\"},null,\"Mike\",{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,[\"Mike 1477 ChBe\",\"Mike 10023 DaDa\",\"Mike 33115 RoCu\",\"Mike 18488 ShHi\",\"Mike 36047 DeRo\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addLayersControl\",\"args\":[[\"OSM\",\"Carto\",\"Esri\"],[\"Adam\",\"Allen\",\"Carrie\",\"Ebony\",\"Gordon\",\"Jen\",\"Kalindi\",\"KerryM\",\"Mike\"],{\"collapsed\":true,\"autoZIndex\":true,\"position\":\"topright\"}]},{\"method\":\"addSearchFeatures\",\"args\":[[\"Adam\",\"Allen\",\"Carrie\",\"Ebony\",\"Gordon\",\"Jen\",\"Kalindi\",\"KerryM\",\"Mike\"],{\"openPopup\":false,\"url\":\"\",\"propertyLoc\":\"loc\",\"propertyName\":\"label\",\"moveToLocation\":true,\"zoom\":20,\"container\":\"\",\"minLength\":1,\"initial\":false,\"casesensitive\":false,\"autoType\":true,\"delayType\":400,\"tooltipLimit\":-1,\"tipAutoSubmit\":true,\"firstTipSubmit\":false,\"autoResize\":true,\"collapsed\":true,\"autoCollapse\":false,\"autoCollapseTime\":1200,\"textErr\":\"Location Not Found\",\"textCancel\":\"Cancel\",\"textPlaceholder\":\"Search...\",\"position\":\"topleft\",\"hideMarkerOnCollapse\":false}]},{\"method\":\"addEasyButton\",\"args\":[{\"icon\":\"ion-arrow-shrink\",\"title\":\"Reset View\",\"onClick\":\"function(btn, map){ map.setView(map._initialCenter, map._initialZoom); }\",\"position\":\"topleft\"}]},{\"method\":\"addLegend\",\"args\":[{\"colors\":[\"#6B8E23\",\"#DAA520\"],\"labels\":[\"Nowra\",\"Ulladulla\"],\"na_color\":null,\"na_label\":\"NA\",\"opacity\":0.5,\"position\":\"bottomright\",\"type\":\"factor\",\"title\":null,\"extra\":null,\"layerId\":null,\"className\":\"info legend\",\"group\":null}]}],\"limits\":{\"lat\":[-35.50702,-34.83963],\"lng\":[150.3298,150.7615]}},\"evals\":[\"calls.14.args.0.onClick\"],\"jsHooks\":{\"render\":[{\"code\":\"function(el, x, data) {\\n  return (function(el, x){ var map = this; map._initialCenter = map.getCenter(); map._initialZoom = map.getZoom();}).call(this.getMap(), el, x, data);\\n}\",\"data\":null}]}}\nWrap-up\nThis project took a lot of googling and reading stackoverflow posts to get leaflet behaving the way I wanted. It took me a while to work out that separate layers needed to be created for each Keyworker in order to get the overlayGroups control and the Seach function working properly, and I had quite a challenge to get the markers to display different colours according to which site the client belonged to. Also, labels don’t behave the same way as popups so there was a lot of mucking around with getting this sorted. I’ll list the websites and stackoverflow posts I found helpful below. If you’ve read this far, I thank you for your time and interest in looking at my blog. :-) Mike\nHelpful resources:\nDataCamp: Interactive Maps with leaflet in R\nLeaflet\nLeaflet for R: Markers\nLeaflet for R: Show/Hide Layers\nColorBrewer 2.0\nstackoverflow: Multiple markers on same coordinate\nstackoverflow: Adjust size of leaflet map in rmarkdown html\nstackoverflow: Change color of leaflet marker Finding the R.framework directory on a Mac\n\n\n\n",
    "preview": "posts/2021-12-19-creating-a-leaflet-map-in-r/blog_image_1200x636.jpg",
    "last_modified": "2021-12-19T21:39:41+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-12-10-poker-hands-probabilities/",
    "title": "Poker Hands Probabilities",
    "description": "Poker as a statistical experiment.",
    "author": [
      {
        "name": "Mike Hudson",
        "url": "https://mike-distill-blog.netlify.app/"
      }
    ],
    "date": "2021-12-10",
    "categories": [
      "probability",
      "html",
      "LaTeX"
    ],
    "contents": "\n\n\n\nFigure 1: Source: https://www.poker.org/wp-content/uploads/2020/12/Poker_Info_Best_Poker_Hands_1-scaled.jpg\n\n\n\nRelevance to Data Analytics Skills\nUsing RMarkdown\nUsing LaTeX in RMarkdown\nUsing HTML in RMarkdown\nUsing R code\nAbility to explain statistical concepts\nAbility to explain other people’s code\nAbility to find resources online\nTo the project…\nAn interesting exercise is to use R to explain and analyse the probabilities of different hands in draw poker. In this exercise, a hand of poker consists of five cards drawn randomly without replacement from a single, well-shuffled deck of 52 cards. The total number of possible five card hands, drawn from a 52 card deck without replacement and given that order does not matter, is:\n\\[\\begin{align*}\nTotal\\ number\\ of\\ possible\\ poker\\ hands = {_{52}C_5} & = \\frac{52!}{5! \\times 47!} \\\\\n\\\\\n& = \\frac{52 \\times 51 \\times 50 \\times 49 \\times 48}{5 \\times 4 \\times 3 \\times 2 \\times 1} \\\\\n\\\\\n& = 2,598,960\n\\end{align*}\\]\n\nThe poker hands of interest are shown in the image at the top of this post and are described as:\n\nRank\n\n\nName\n\n\nDescription\n\n\n1\n\n\nRoyal Flush\n\n\nThe hand contains the A, K, Q, J and 10 of the same suit.\n\n\n2\n\n\nStraight Flush\n\n\nThe hand contains five cards of the same suit with consecutive values. A can come before a 2, but not after K (as the hand would then be a Royal Flush).\n\n\n3\n\n\nFour of a Kind\n\n\nThe hand contains four cards of the same rank (one for each suit)\n\n\n4\n\n\nFull House\n\n\nThe hand contains three cards of one rank and two cards of a different rank.\n\n\n5\n\n\nFlush\n\n\nThe hand contains five cards of the same suit, but not a Straight Flush.\n\n\n6\n\n\nStraight\n\n\nThe hand contains five cards with consecutive ranks that are not a Straight Flush.\n\n\n7\n\n\nThree of a Kind\n\n\nThe hand contains three cards of the same rank and is not a Full House or Four of a Kind.\n\n\n8\n\n\nTwo Pairs\n\n\nThe hand contains two pairs, each of a different rank.\n\n\n9\n\n\nOne pair\n\n\nThe hand contains two cards of the same rank and is not a Full House or Four of a Kind.\n\n\n10\n\n\nHighest card\n\n\nThe hand is not any of the above.\n\nRoyal Flush and Straight Flush\nThe easiest way to solve this problem is to simply list all of the possible Straight Flush hands (of which the Royal Flush is a subset):\n\n\n\n\n\n\n\n\n\n\n\nA, 2, 3, 4, 5\n\n\n2, 3, 4, 5, 6\n\n\n3, 4, 5, 6, 7\n\n\n4, 5, 6, 7, 8\n\n\n5, 6, 7, 8, 9\n\n\n6, 7, 8, 9, 10\n\n\n7, 8, 9, 10, J\n\n\n8, 9, 10, J, Q\n\n\n9, 10, J, Q, K\n\n\n10, J, Q, K, A\n\nThe last hand shown corresponds to a Royal flush, while the other nine are regular Straight Flushes. Since there are four suits in the deck, there are four combinations of cards that yield a Royal Flush and 36 (9 x 4) that yield a Straight Flush. Therefore:\n\\[\\begin{align*}\nP(Royal\\ Flush) & = \\frac{4}{2,598,960} = 0.00000153908 \\\\\n\\\\\nP(Straight\\ Flush) & = \\frac{36}{2,598,960} = 0.00001385169\n\\end{align*}\\]\nOn average, a Royal Flush is dealt one time in every 649,740 deals, and a Straight Flush is dealt one time in every 72,193 deals.\nFour of a Kind\nThe number of ways that five cards can be dealt to produce Four of a Kind requires three independent choices:\nChoose the rank of the card that appears four times in the hand. A playing card can have a rank of 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K, or A. For Four of a Kind we choose 1 rank from a set of 13 ranks. The number of ways to do this is \\(_{13}C_1 = 13\\).\nChoose one rank for the fifth card. There are 12 remaining ranks to choose from. The number of ways to do this is \\(_{12}C_1 = 12\\).\nChoose a suit for the fifth card. There are four suits to choose from. The number of ways to do this is \\(_4C_1 = 4\\).\nThe number of ways to produce Four of a Kind is equal to the product of the number of ways to make each independent choice. Therefore: \\[Number\\ of\\ Four\\ of\\ a\\ Kind\\ Hands\\ =\\ _{13}C_1 \\times _{12}C_1 \\times _4C_1 = 13 \\times 12 \\times 4 = 624\\]\nIn other words, there are 13 ranks, so the number of possible sets of four cards is 13. The fifth card can be any one of the 48 cards left in the deck.\nFinally, we compute the probability. \\[P(Four\\ of\\ a\\ Kind) = \\frac{624}{2,598,960} = 0.00024009604\\]\nOn average, Four of a Kind is dealt one time in every 4,165 deals.\nFull House\nTo count the number of ways that five cards can be dealt to produce a Full House requires four independent choices:\nChoose the rank of cards in the hand. For a Full House, we choose 2 ranks from a set of 13 ranks. The number of ways to do this is \\(_{13}C_2\\).\nChoose one rank for the three-card combination. There are 2 ranks in a Full House, from which we choose one. The number of ways to do this is \\(_2C_1\\).\nChoose suits for the three-card combination. There are four suits, from which we choose three. The number of ways to do this is \\(_4C_3\\).\nChoose suits for the two-card combination. There are four suits, from which we choose two. The number of ways to do this is \\(_4C_2\\).\nThe number of ways to produce a Full House is equal to the product of the number of ways to make each independent choice. Therefore:\n\\[\\begin{align*}\nNumber\\ of\\ Full\\ House\\ hands & = _{13}C_2 \\times _2C_1 \\times _4C_3 \\times _4C_2 \\\\\n\\\\\n& = 78 \\times 2 \\times 4 \\times 6 \\\\\n\\\\\n& = 3,744\n\\end{align*}\\]\nOr to put it another way, for the number of three-card combinations, we have 13 possible options for the rank, and 4 options for the combination of suits associated with these three cards (that is \\(_4C_3 = 4\\)). Therefore, the number of three-card combinations is 13 x 4 = 52. There are now 12 possible ranks that can be used for the two-card combination, and there are \\(_4C_2 = \\frac{4!}{2! \\times 2!} = 6\\) combinations of suits for that rank, for a total of 12 x 6 = 72 distinct two-card combinations. This gives \\(13 \\times 4 \\times 12 \\times 6 = 52 \\times 72 = 3,744\\) unique Full House hands.\nFinally, we compute the probability. \\[P(Full\\ House) = \\frac{3,744}{2,598,960} = 0.00144057623\\]\nBased on this result, a Full House is dealt, on average, approximately one time in every 694 deals.\nFlush\nThe Venn diagram below shows the relationship between Straight Flushes, and what we will call Ordinary Flushes.\nVenn Diagram of Flush handsEverything within the rectangle is a Flush, that is, a poker hand with five cards in the same suit. The blue circle contains all the hands that are an Ordinary Flush, and the red circle contains all the hands that are a Straight Flush. The Ordinary Flush and the Straight Flush are mutually exclusive events. Accordingly, \\(P_f = P_{sf} + P_{of}\\), where \\(P_f\\) is the probability of any type of flush, \\(P_{sf}\\) is the probability of a Straight Flush, \\(P_{of}\\) is the probability of an Ordinary Flush. From the analysis in a previous section, we already know that the number of Straight Flush hands is 40. To count the number of ways that five cards can be dealt to produce any Flush hand (i.e. the number of Flush hands contained in the rectangle) requires two independent choices:\nChoose the rank of each card in the hand. That is, choose five ranks from the set of 13 distinct ranks. The number of ways to do this is \\(_{13}C_5\\).\nChoose one suit for the hand. There are four suits to choose from, so the number of ways to do this is \\(_4C_1\\).\nThe number of ways to produce a Flush is equal to the product of the number of ways to make each independent choice. Therefore:\n\\[\\begin{align*}\nTotal\\ number\\ of\\ Flush\\ hands & = {_{13}C_5} \\times {_4C_1} \\\\\n\\\\\n& = 1,287 \\times 4 \\\\\n\\\\\n& = 5,148\n\\end{align*}\\]\nFinally, we compute the probability for Ordinary Flush hands by subtracting the number of Straight Flush hands from the total for all Flush hands, \\(5,148 - 40 = 5,108\\). We can now find the probability of being dealt an Ordinary Flush: \\[P(Ordinary\\ Flush) = \\frac{5,108}{2,598,960} = 0.001965400155\\]\nBased on this result, an Ordinary Flush is dealt, on average, once every 509 deals.\nStraight\nThe Venn diagram below shows the relationship between Straight Flushes, and what we will call Ordinary Straights.\nVenn Diagram of Straight handsEverything within the rectangle is a Straight, that is, a poker hand with five cards in sequence. The green circle contains all the hands that are an Ordinary Straight, and the red circle contains all the hands that are a Straight Flush. The Ordinary Straight and the Straight Flush are mutually exclusive events. Accordingly, \\(P_s = P_{sf} + P_{os}\\), where \\(P_s\\) is the probability of any type of straight, \\(P_{sf}\\) is the probability of a Straight Flush, \\(P_{os}\\) is the probability of an Ordinary Straight. From the analysis in a previous section, we already know that the number of Straight Flush hands is 40. To count the number of ways that five cards can be dealt to produce any Straight hand (i.e. the number of Straight hands contained in the rectangle) requires six independent choices:\nChoose the rank of the lowest card in the hand. For a straight, the lowest card can be A, 2, 3, 4, 5, 6, 7, 8, 9, 10. So we choose one rank from a set of 10 ranks. The number of ways to do this is \\(_{10}C_1\\).\nChoose one suit for the first card in the hand. There are four suits to choose from, so the number of ways to do this is \\(_4C_1\\).\nChoose one suit for the second card in the hand. There are four suits to choose from, so the number of ways to do this is \\(_4C_1\\).\nChoose one suit for the third card in the hand. There are four suits to choose from, so the number of ways to do this is \\(_4C_1\\).\nChoose one suit for the fourth card in the hand. There are four suits to choose from, so the number of ways to do this is \\(_4C_1\\).\nChoose one suit for the fifth card in the hand. There are four suits to choose from, so the number of ways to do this is \\(_4C_1\\).\nThe number of ways to produce a Straight is equal to the product of the number of ways to make each independent choice. Therefore:\n\\[\\begin{align*}\nTotal\\ number\\ of\\ Straight\\ hands & = {_{10}C_1} \\times {_4C_1} \\times {_4C_1} \\times {_4C_1} \\times {_4C_1} \\times {_4C_1} \\\\\n\\\\\n& = 10 \\times 4 \\times 4 \\times 4 \\times 4 \\times 4 \\\\\n\\\\\n& = 10,240\n\\end{align*}\\]\nFinally, we compute the probability for Ordinary Straight hands by subtracting the number of Straight Flush hands from the total for all Straight hands, \\(10,240 - 40 = 10,200\\). We can now find the probability of being dealt an Ordinary Straight: \\[P(Ordinary\\ Straight) = \\frac{10,200}{2,598,960} = 0.00392464678\\]\nBased on this result, an Ordinary Straight is dealt, on average, once every 255 deals.\nThree of a Kind\nThe same general approach is used as that for the Full House. To count the number of ways that five cards can be dealt to produce three of a kind requires five independent choices:\nChoose the rank for cards of matching rank. For Three of a Kind, we choose 1 rank from a set of 13 ranks. The number of ways to do this is \\(_{13}C_1\\).\nChoose the ranks for the non-matching cards. There are 12 remaining ranks, from which we choose two. The number of ways to do this is \\(_{12}C_2\\).\nChoose suits for the three-card combination. There are four suits, from which we choose three. The number of ways to do this is \\(_4C_3\\).\nChoose a suit for one of the non-matching cards. There are four suits, from which we choose one. The number of ways to do this is \\(_4C_1\\).\nChoose a suit for the other non-matching cards. There are four suits, from which we choose one. The number of ways to do this is \\(_4C_1\\).\nThe number of ways to produce the Three of a Kind hand is equal to the product of the number of ways to make each independent choice. Therefore:\n\\[\\begin{align*}\nNumber\\ of\\ Three\\ of\\ a\\ Kind\\ hands & = {_{13}C_1} \\times {_{12}C_2} \\times {_4C_3} \\times {_4C_1} \\times {_4C_1} \\\\\n\\\\\n& = 13 \\times 66 \\times 4 \\times 4 \\times 4 \\\\\n\\\\\n& = 54,912\n\\end{align*}\\]\nFinally, we compute the probability. \\[P(Three\\ of\\ a\\ Kind) = \\frac{54,912}{2,598,960} = 0.021128455138\\]\nBased on this result, Three of a Kind is dealt, on average, approximately one time in every 47 deals.\nTwo Pairs\nTo count the number of ways that five cards can be dealt to produce two pairs requires five independent choices:\nChoose the rank for cards of matching rank. For Two Pairs, we choose 2 ranks from a set of 13 ranks. The number of ways to do this is \\(_{13}C_2\\).\nChoose the rank of the remaining non-matching card. There are 11 remaining ranks, from which we choose one. The number of ways to do this is \\(_{11}C_1\\).\nChoose suits for the first two-card combination. There are four suits, from which we choose two. The number of ways to do this is \\(_4C_2\\).\nChoose suits for the second two-card combination. There are four suits, from which we choose two. The number of ways to do this is \\(_4C_2\\).\nChoose a suit for the non-matching card. There are four suits, from which we choose one. The number of ways to do this is \\(_4C_1\\).\nThe number of ways to produce Two Pairs is equal to the product of the number of ways to make each independent choice. Therefore:\n\\[\\begin{align*}\nNumber\\ of\\ Two\\ Pairs\\ hands & = {_{13}C_2} \\times {_{11}C_1} \\times {_4C_2} \\times {_4C_2} \\times {_4C_1} \\\\\n\\\\\n& = 78 \\times 11 \\times 6 \\times 6 \\times 4 \\\\\n\\\\\n& = 123,552\n\\end{align*}\\]\nFinally, we compute the probability. \\[P(Two\\ Pairs) = \\frac{123,552}{2,598,960} = 0.04753901561\\]\nBased on this result, Two Pairs is dealt, on average, approximately one time in every 21 deals.\nOne Pair\nTo count the number of ways that five cards can be dealt to produce one pair requires six independent choices:\nChoose the rank for the cards of matching rank. For One Pair, we choose 1 rank from a set of 13 ranks. The number of ways to do this is \\(_{13}C_1\\).\nChoose the rank of the remaining non-matching cards. There are 12 remaining ranks, from which we choose three. The number of ways to do this is \\(_{12}C_3\\).\nChoose suits for the cards of matching rank. There are four suits, from which we choose two. The number of ways to do this is \\(_4C_2\\).\nChoose a suit for the first non-matching card. There are four suits, from which we choose one. The number of ways to do this is \\(_4C_1\\).\nChoose a suit for the second non-matching card. There are four suits, from which we choose one. The number of ways to do this is \\(_4C_1\\).\nChoose a suit for the third non-matching card. There are four suits, from which we choose one. The number of ways to do this is \\(_4C_1\\).\nThe number of ways to produce One Pair is equal to the product of the number of ways to make each independent choice. Therefore:\n\\[\\begin{align*}\nNumber\\ of\\ One\\ Pair\\ hands & = {_{13}C_1} \\times {_{12}C_3} \\times {_4C_2} \\times {_4C_1} \\times {_4C_1} \\times {_4C_1} \\\\\n\\\\\n& = 13 \\times 220 \\times 6 \\times 4 \\times 4 \\times 4 \\\\\n\\\\\n& = 1,098,240\n\\end{align*}\\]\nFinally, we compute the probability. \\[P(One\\ Pair) = \\frac{1,098,240}{2,598,960} = 0.42256902761\\]\nOn any given hand, there is on average a 42% chance of being dealt One Pair.\nSummary Table\n(2,598,960 unique hands from a 52 card deck)\n\nRank\n\n\nName\n\n\nCount\n\n\nProbabilty\n\n\nAvg.Deals\n\n\n1\n\n\nRoyal Flush\n\n\n4\n\n\n0.00000153908\n\n\n649,740\n\n\n2\n\n\nStraight Flush\n\n\n36\n\n\n0.00001385169\n\n\n72,193\n\n\n3\n\n\nFour of a Kind\n\n\n624\n\n\n0.00024009604\n\n\n4165\n\n\n4\n\n\nFull House\n\n\n3,744\n\n\n0.00144057623\n\n\n694\n\n\n5\n\n\nFlush\n\n\n5,108\n\n\n0.00196540155\n\n\n509\n\n\n6\n\n\nStraight\n\n\n10,200\n\n\n0.00392464678\n\n\n255\n\n\n7\n\n\nThree of a Kind\n\n\n54,912\n\n\n0.02112845138\n\n\n47\n\n\n8\n\n\nTwo Pairs\n\n\n123,552\n\n\n0.04753901561\n\n\n21\n\n\n9\n\n\nOne Pair\n\n\n1,098,240\n\n\n0.42256902761\n\n\n2.4\n\nSimulation Using R\nThe following R code is heavily based on the code I found at the Duke University site, link at the end of this blog post. That source code comes without explanation and without any comments. I attempt to rectify that by providing interpretation and making clear what is going on. I am not an R expert so please accept that this is a learning exercise for me, but your feedback and suggestions are welcome!\nFirst, create an object to hold the deck.\nI found the code from Duke Uni a little confusing, so I used the following. It may be verbose but its easier to understand:\n\n\nrank <- rep(c(2:10, \"J\", \"Q\", \"K\", \"A\"), 4)\nsuit <- rep(c(\"C\" ,\"D\" ,\"H\" ,\"S\"), each = 13)\ndeck <- cbind(rank, suit)\n\n\n\nYou can find a good explanation of the rep function at Statistics Globe, and I would recommend that YouTube channel for learning about using R.\nNext, we construct three functions. One for dealing a single hand of five cards, drawn at random from our deck. Another function for determining what kind of hand has been dealt, for example Full House, Straight, etc, or if nothing higher, High Card. The third function is for simulating user determined numbers of deals and returning the number of each kind of hand dealt in that simulation.\n\n\n# a function that returns a random hand of 5 cards drawn from our deck of 52 cards\ndeal_hand <- function(){\n    return(deck[sample(1:52, 5, replace = FALSE),])\n}\n\n\n\n\n\n# a function that determines what kind oh hand has been dealt\nwhat_hand <- function(hand){\n    ranks_acehigh = c(2:10, \"J\", \"Q\", \"K\", \"A\")\n    ranks_acelow = c(\"A\", 2:10, \"J\", \"Q\", \"K\")\n    \n    rank_i_ah = sort(sapply(hand[, \"rank\"], function(x) which(x == ranks_acehigh)))\n    rank_i_al = sort(sapply(hand[, \"rank\"], function(x) which(x == ranks_acelow)))\n    \n    is_straight = all(rank_i_ah - min(rank_i_ah) + 1 == 1:5) | all(rank_i_al - min(rank_i_al) + 1 == 1:5)\n    is_flush = length(unique(hand[, \"suit\"])) == 1\n    \n    if(is_straight && is_flush){\n        if(all(c(\"K\", \"A\") %in% hand[, \"rank\"])) return(\"Royal Flush\")\n        else return(\"Straight Flush\")\n    }\n    \n    if(is_straight) return(\"Straight\")\n    if(is_flush) return(\"Flush\")\n    \n    tab = sort(table(hand[, \"rank\"]))\n    if(length(tab) == 2){\n        if(all(tab == c(1, 4))) return(\"Four of a Kind\")\n        if(all(tab == c(2, 3))) return(\"Full House\")\n    }\n    if(length(tab) == 3){\n        if(all(tab == c(1, 1, 3))) return(\"Three of a Kind\")\n        if(all(tab == c(1, 2, 2))) return(\"Two Pairs\")\n    }\n    if(length(tab) == 4){\n        return(\"One Pair\")\n    }\n    return(\"High Card\")\n}\n\n\n\n\n\n# a function that counts the different kinds of poker hands from a simulation of N number of deals\nsimulate_deals <- function(N = 10000){\n    hands = c(\"Royal Flush\", \"Straight Flush\", \"Four of a Kind\",\n              \"Full House\", \"Flush\", \"Straight\", \"Three of a Kind\",\n              \"Two Pairs\", \"One Pair\", \"High Card\")\n    \n    res = matrix(rep(0, length(hands)), ncol = 1)\n    rownames(res) = hands\n    colnames(res) = \"Counts\"\n    \n    pb = txtProgressBar(min = 0, max = N, style = 3)\n    for(i in 1:N){\n        hand = what_hand(deal_hand())\n        res[hand,1] = res[hand,1] + 1\n        setTxtProgressBar(pb, i)\n    }\n    return(res)\n}\n\n\n\nWrap-up\nThis little project was well worth the effort. Using HTML and LaTeX within RMarkdown takes some doing but knowing how to format and set out tables and formulas is necessary in order to produce a post that entices the reader to spend their time looking it over. Like anything, practice makes perfect, and that’s especially true for RMarkdown and coming to terms with all its idiosynchracies. Also, going over the R code from Duke was tremendously beneficial in learning how to use base R efficiently and how to construct functions that flow logically. If you’ve read this far, I thank you for your time and interest in looking at my blog. :-) Mike\nThis blog post draws from the following resources:\nRodriguez, Abel & Mendes, Bruno. (2018). Probability, Decisions and Games: A Gentle Introduction Using R, John Wiley & Sons.\nStat Trek: Teach yourself statistics\nDuke University: Department of Statistical Science\n\n\n\n",
    "preview": "posts/2021-12-10-poker-hands-probabilities/Poker_Hands_1200x754.jpg",
    "last_modified": "2021-12-12T20:26:35+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-11-25-top-100-baby-names/",
    "title": "Top 100 Baby Names",
    "description": "Top 100 Baby Names registered in NSW from 1952 to 2019",
    "author": [
      {
        "name": "Mike Hudson",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2021-11-25",
    "categories": [
      "r project"
    ],
    "contents": "\n\n\n\nA project I undertook to practice my data wrangling skills. NSW BDM provides the raw data in pdf format, so the biggest challenge was extracting that data into something I could work with.\nI have the data for 2020. Just need some spare time to update the project.\nYou can see the racing bar charts here:\nBoys names\nGirls names\n\n\n\n",
    "preview": "posts/2021-11-25-top-100-baby-names/top-100-baby-names.png",
    "last_modified": "2021-11-26T15:16:11+11:00",
    "input_file": {},
    "preview_width": 1528,
    "preview_height": 736
  }
]
